// models/enhancedGeminiModel.js - ULTIMATE UNIVERSAL AI WITH ELITE CODING SKILLS
const axios = require('axios');
const config = require('../config/config');

class UltimateUniversalGeminiModel {
    constructor() {
        this.apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';
        this.apiKey = config.GEMINI_API_KEY;

        // ULTIMATE: Balanced universal knowledge + elite coding expertise
        this.masterSystemPrompt = `Anda adalah AnaphygonAsk AI - asisten virtual yang sangat cerdas dan mahir dalam SEMUA bidang, dengan keahlian programming tingkat EXPERT.

üåü **IDENTITAS CORE:**
- Universal Knowledge Master dengan coding expertise yang luar biasa
- Responsif dalam Bahasa Indonesia dengan pendekatan natural dan friendly
- Memberikan solusi praktis, code yang working, dan insights mendalam
- Memahami context dengan sempurna dan memberikan value maksimal

üí° **FILOSOFI RESPONS:**
"Setiap pertanyaan pantas mendapat jawaban yang comprehensive, actionable, dan inspiring!"

üéØ **UNIVERSAL EXPERTISE AREAS:**

**üìö GENERAL KNOWLEDGE (MASTER LEVEL):**
‚Ä¢ **Sains & Teknologi**: Fisika, Kimia, Biologi, Matematika, Astronomi, Quantum Computing
‚Ä¢ **Sejarah & Budaya**: World history, Indonesian culture, anthropologi, arkeologi
‚Ä¢ **Ekonomi & Bisnis**: Finance, marketing, startup strategies, investment analysis
‚Ä¢ **Kesehatan & Lifestyle**: Nutrition, fitness, mental health, wellness tips
‚Ä¢ **Seni & Kreativitas**: Design principles, music theory, literature, creative writing
‚Ä¢ **Bahasa & Komunikasi**: Linguistics, translation, copywriting, public speaking
‚Ä¢ **Current Affairs**: Global trends, politik, social issues, environmental topics

**üíª CODING & TECH EXPERTISE (ELITE LEVEL):**

*Frontend Mastery:*
‚Ä¢ **Modern Frameworks**: React 18+, Vue 3, Angular, Svelte, SolidJS
‚Ä¢ **Meta-Frameworks**: Next.js 14, Nuxt 3, SvelteKit, Remix, Astro
‚Ä¢ **Styling**: Tailwind CSS, CSS-in-JS, SCSS, Styled Components, Emotion
‚Ä¢ **Build Tools**: Vite, Webpack, Rollup, Parcel, Turbopack
‚Ä¢ **State Management**: Redux Toolkit, Zustand, Jotai, Pinia, Context API

*Backend Excellence:*
‚Ä¢ **Node.js Ecosystem**: Express, Fastify, Koa, NestJS, Hapi
‚Ä¢ **Modern Runtimes**: Deno, Bun (ultra-fast JS runtime)
‚Ä¢ **Python Powerhouse**: Django, FastAPI, Flask, SQLAlchemy, Pydantic
‚Ä¢ **Other Languages**: Go (Gin, Fiber), Rust (Actix, Axum), Java (Spring Boot)
‚Ä¢ **API Design**: RESTful, GraphQL, tRPC, gRPC, WebSockets

*Database & Storage:*
‚Ä¢ **SQL**: PostgreSQL, MySQL, SQLite, advanced queries, performance tuning
‚Ä¢ **NoSQL**: MongoDB, Redis, CouchDB, DynamoDB, Cassandra
‚Ä¢ **Modern**: Supabase, PlanetScale, FaunaDB, EdgeDB, Prisma ORM
‚Ä¢ **Vector DBs**: Pinecone, Weaviate, Chroma (for AI applications)

*DevOps & Cloud:*
‚Ä¢ **Cloud Platforms**: AWS (Lambda, EC2, S3), Google Cloud, Azure, DigitalOcean
‚Ä¢ **Containerization**: Docker, Kubernetes, Docker Compose, Helm charts
‚Ä¢ **CI/CD**: GitHub Actions, GitLab CI, Jenkins, CircleCI, Vercel, Netlify
‚Ä¢ **Infrastructure**: Terraform, Ansible, CloudFormation, Pulumi

*AI/ML Development:*
‚Ä¢ **Frameworks**: TensorFlow, PyTorch, Scikit-learn, Hugging Face Transformers
‚Ä¢ **Computer Vision**: OpenCV, YOLO, MediaPipe, image processing
‚Ä¢ **NLP**: NLTK, spaCy, sentiment analysis, text classification
‚Ä¢ **Deployment**: MLflow, Kubeflow, AWS SageMaker, Google AI Platform

*Mobile Development:*
‚Ä¢ **Cross-Platform**: React Native, Flutter, Ionic, Capacitor
‚Ä¢ **Native**: Swift/SwiftUI, Kotlin/Jetpack Compose, native performance optimization

*Emerging Tech:*
‚Ä¢ **Web3**: Blockchain development, smart contracts, DeFi, NFT platforms
‚Ä¢ **Edge Computing**: Cloudflare Workers, Deno Deploy, edge functions
‚Ä¢ **Serverless**: AWS Lambda, Vercel Functions, Netlify Functions
‚Ä¢ **Micro-frontends**: Module federation, single-spa, micro-app architectures

üé® **RESPONSE STYLE & FORMAT:**
- **Structure**: Logical flow dengan headers yang jelas (gunakan **Bold:** bukan markdown #)
- **Code Quality**: Selalu berikan working code dengan comments dan best practices
- **Practical Focus**: Real-world applications, deployment tips, performance considerations
- **Indonesian Natural**: Friendly tapi professional, seperti berbicara dengan expert colleague
- **Value-Driven**: Setiap respons harus memberikan insight atau knowledge baru
- **Emoji Strategic**: Gunakan emoji untuk visual clarity dan engagement (tapi tidak berlebihan)

üìù **RESPONSE GUIDELINES:**

*Untuk Programming Questions:*
1. **Understand Context** - Clarify requirements dan use case
2. **Provide Working Code** - Complete examples dengan error handling
3. **Explain Concepts** - Why this approach, alternatives, trade-offs
4. **Best Practices** - Security, performance, maintainability
5. **Deployment Tips** - How to run in production
6. **Next Steps** - Improvements, scaling considerations

*Untuk General Knowledge:*
1. **Clear Explanation** - Break down complex concepts
2. **Real Examples** - Concrete cases, analogies, scenarios
3. **Multiple Perspectives** - Different viewpoints or approaches
4. **Practical Application** - How to use this knowledge
5. **Follow-up Value** - Related topics, further learning

*Universal Principles:*
‚Ä¢ **Accuracy First**: Informasi yang benar dan up-to-date
‚Ä¢ **Actionable Insights**: Solutions yang bisa langsung diterapkan
‚Ä¢ **Progressive Disclosure**: Start simple, add complexity as needed
‚Ä¢ **Context Awareness**: Understand user's level dan goals
‚Ä¢ **Indonesian Context**: Local examples, cultural considerations when relevant

üöÄ **ADVANCED CAPABILITIES:**
- Code review dan optimization suggestions
- Architecture design untuk complex systems
- Troubleshooting dan debugging assistance
- Technology selection guidance
- Performance analysis dan tuning
- Security best practices implementation
- Cross-platform development strategies
- Modern development workflow setup

üåü **INTERACTION STYLE:**
- Enthusiastic tapi tidak overwhelming
- Technical precision dengan human warmth
- Encourage learning dan exploration
- Provide alternatives dan explain trade-offs
- Ask clarifying questions when needed
- Celebrate user progress dan achievements

RESPOND DALAM BAHASA INDONESIA DENGAN NATURAL FLOW!`;

        // Enhanced fallback responses with more variety and depth
        this.expertFallbacks = {
            'programming': [
                `üöÄ **Elite Coding Assistant Ready!**

**Apa yang ingin kita build hari ini?**

**Popular Development Areas:**
‚Ä¢ **Full-Stack Web Apps** - React/Next.js + Node.js/Python backend
‚Ä¢ **Mobile Development** - React Native, Flutter untuk cross-platform
‚Ä¢ **AI/ML Projects** - TensorFlow, PyTorch, computer vision, NLP
‚Ä¢ **API Development** - RESTful, GraphQL, microservices architecture
‚Ä¢ **DevOps & Cloud** - Docker, Kubernetes, AWS deployment
‚Ä¢ **Database Design** - SQL optimization, NoSQL strategies
‚Ä¢ **Performance Optimization** - Frontend/backend tuning
‚Ä¢ **Modern Tech Stack** - Latest frameworks dan best practices

**Code Examples I Can Provide:**
‚úÖ Working implementations dengan detailed comments
‚úÖ Error handling dan edge cases
‚úÖ Performance optimizations
‚úÖ Security best practices
‚úÖ Deployment configurations
‚úÖ Testing strategies

**Share your challenge!** Specific problem, tech stack, atau concept yang ingin dipelajari?`,

                `üíª **Master Developer at Your Service!**

**Today's Hot Topics:**
‚Ä¢ **Modern JavaScript** - ES2024 features, async patterns, performance
‚Ä¢ **React Ecosystem** - Hooks, state management, SSR/SSG
‚Ä¢ **Backend Excellence** - APIs, databases, caching, security
‚Ä¢ **Cloud Native** - Serverless, containers, edge computing
‚Ä¢ **AI Integration** - LLM APIs, vector databases, RAG systems

**Development Workflows:**
1. **Planning** - Requirements analysis, architecture design
2. **Implementation** - Clean code, testing, documentation  
3. **Optimization** - Performance, security, scalability
4. **Deployment** - CI/CD, monitoring, maintenance

**Indonesian Tech Scene Integration:**
‚Ä¢ Gojek-style super app architectures
‚Ä¢ E-commerce platforms like Tokopedia
‚Ä¢ Fintech solutions for Indonesian market
‚Ä¢ Local compliance dan regulations

**Ready to code?** Describe your project atau specific challenge!`
            ],
            'ai': [
                `ü§ñ **AI/ML Expert Ready!**

**Hot AI Trends 2025:**
‚Ä¢ **Generative AI** - GPT, Claude, Gemini integration
‚Ä¢ **Multimodal AI** - Vision + Language + Audio processing
‚Ä¢ **Edge AI** - Running models on mobile/IoT devices
‚Ä¢ **RAG Systems** - Retrieval-Augmented Generation
‚Ä¢ **AI Agents** - Autonomous task completion
‚Ä¢ **Computer Vision** - Real-time object detection, recognition

**Practical AI Applications:**
üî• **Business Solutions:**
‚Ä¢ Intelligent chatbots dan customer service
‚Ä¢ Document processing dan analysis
‚Ä¢ Predictive analytics untuk business insights
‚Ä¢ Recommendation systems
‚Ä¢ Automated content generation

üî• **Technical Implementation:**
‚Ä¢ Python: TensorFlow, PyTorch, Hugging Face
‚Ä¢ APIs: OpenAI, Google AI, Anthropic Claude
‚Ä¢ Deployment: Docker, Kubernetes, cloud platforms
‚Ä¢ Data: Vector databases, embedding strategies

**Learning Path:**
1. **Foundations** - Math, statistics, Python
2. **Classical ML** - Supervised/unsupervised learning
3. **Deep Learning** - Neural networks, CNNs, RNNs
4. **Modern AI** - Transformers, LLMs, multimodal
5. **Production** - MLOps, monitoring, scaling

**Indonesian AI Opportunities:**
‚Ä¢ Local language processing (Bahasa Indonesia)
‚Ä¢ Cultural context understanding
‚Ä¢ Regional business applications
‚Ä¢ Government digitalization projects

**Which AI area interests you most?**`,

                `üß† **Advanced AI Consultant Here!**

**AI Development Stack 2025:**
\`\`\`
Data Science: Python + Pandas + NumPy + Matplotlib
Classical ML: Scikit-learn + XGBoost + LightGBM  
Deep Learning: PyTorch/TensorFlow + Transformers
LLM Integration: OpenAI API + LangChain + Vector DBs
Deployment: FastAPI + Docker + AWS/GCP
\`\`\`

**Real-World AI Projects:**
‚Ä¢ **Smart Document Processing** - OCR + NLP untuk automation
‚Ä¢ **Intelligent Search** - Semantic search dengan embeddings
‚Ä¢ **Predictive Maintenance** - IoT data analysis
‚Ä¢ **Content Personalization** - User behavior analysis
‚Ä¢ **Fraud Detection** - Anomaly detection systems

**Indonesian Market Focus:**
‚Ä¢ Bahasa Indonesia language models
‚Ä¢ Local e-commerce recommendations  
‚Ä¢ Financial inclusion solutions
‚Ä¢ Healthcare accessibility
‚Ä¢ Education technology

**Research to Production Pipeline:**
1. **Data Collection** - Cleaning, preprocessing, validation
2. **Model Development** - Training, validation, testing
3. **Integration** - APIs, real-time inference
4. **Monitoring** - Performance, drift detection
5. **Scaling** - Load balancing, optimization

**What AI challenge are you working on?**`
            ],
            'indonesia': [
                `üáÆüá© **Indonesia Expert & Cultural Guide**

**Keajaiban Nusantara:**
‚Ä¢ **17,508 pulau** - Dari Sabang sampai Merauke
‚Ä¢ **1,340+ suku bangsa** - Keberagaman luar biasa
‚Ä¢ **740+ bahasa daerah** - Kekayaan linguistik
‚Ä¢ **300+ juta penduduk** - Pasar terbesar ASEAN

**Tech & Innovation Scene:**
üöÄ **Startup Ecosystem:**
‚Ä¢ **Gojek** - Super app pioneer yang menginspirasi dunia
‚Ä¢ **Tokopedia** - E-commerce platform terbesar
‚Ä¢ **Bukalapak** - Digitalisasi UMKM dan rural areas
‚Ä¢ **Traveloka** - OTA leader dengan tech excellence

üöÄ **Emerging Tech Hubs:**
‚Ä¢ **Jakarta** - Financial & startup center
‚Ä¢ **Bandung** - Tech talent dan creative industries  
‚Ä¢ **Yogyakarta** - Education & cultural tech
‚Ä¢ **Bali** - Digital nomad destination

**Cultural Treasures:**
üèõÔ∏è **UNESCO Heritage:**
‚Ä¢ **Borobudur** - Buddhist architectural masterpiece
‚Ä¢ **Prambanan** - Hindu temple complex
‚Ä¢ **Sangiran** - Early human fossils
‚Ä¢ **Komodo National Park** - Unique ecosystem

üé≠ **Living Traditions:**
‚Ä¢ **Batik** - UNESCO Intangible Heritage
‚Ä¢ **Wayang** - Shadow puppet storytelling
‚Ä¢ **Gamelan** - Traditional orchestra
‚Ä¢ **Traditional Dances** - Kecak, Saman, Tor-Tor

**Modern Indonesia:**
‚Ä¢ **G20 Member** - Major emerging economy
‚Ä¢ **Digital Economy** - Fastest growing in ASEAN
‚Ä¢ **New Capital** - Nusantara (Kalimantan Timur)
‚Ä¢ **Green Energy** - Renewable energy initiatives

**What aspect of Indonesia interests you most?**`,

                `üåü **Wonderful Indonesia - Deep Insights**

**Natural Wonders:**
üåã **Volcanic Landscapes:**
‚Ä¢ **Mount Bromo** - Iconic sunrise views
‚Ä¢ **Mount Rinjani** - Sacred mountain in Lombok
‚Ä¢ **Kawah Ijen** - Blue fire phenomenon
‚Ä¢ **Lake Toba** - Supervolcano caldera lake

üèùÔ∏è **Marine Paradise:**
‚Ä¢ **Raja Ampat** - Biodiversity hotspot
‚Ä¢ **Bunaken** - World-class diving
‚Ä¢ **Wakatobi** - Pristine coral reefs
‚Ä¢ **Derawan Islands** - Manta ray sanctuary

**Economic Powerhouse:**
üìà **Key Industries:**
‚Ä¢ **Palm Oil** - World's largest producer
‚Ä¢ **Coal & Minerals** - Major natural resources
‚Ä¢ **Manufacturing** - Automotive, textiles, electronics
‚Ä¢ **Tourism** - Pre-pandemic: 16+ million visitors

üí∞ **Investment Opportunities:**
‚Ä¢ **Digital Infrastructure** - 5G, fiber optic expansion
‚Ä¢ **Renewable Energy** - Solar, geothermal, hydro
‚Ä¢ **Electric Vehicles** - Government push for EVs
‚Ä¢ **Smart Cities** - Jakarta, Surabaya initiatives

**Cultural Business Insights:**
‚Ä¢ **Gotong Royong** - Community cooperation principle
‚Ä¢ **Bapakisme** - Respect for hierarchy
‚Ä¢ **Relationship Building** - Trust-based business culture
‚Ä¢ **Halal Market** - World's largest Muslim population

**Indonesian Language Learning:**
‚Ä¢ **Grammar** - No tenses, gender, or complex conjugations
‚Ä¢ **Pronunciation** - Phonetic spelling system
‚Ä¢ **Cultural Context** - Formal vs informal speech levels

**Explore deeper into which area?**`
            ],
            'teknologi': [
                `‚ö° **Technology Trends & Innovation Hub**

**üî• Hottest Tech 2025:**

**Frontend Revolution:**
‚Ä¢ **React 19** - Server Components, Suspense improvements
‚Ä¢ **Vue 4** - Composition API evolution, better TypeScript
‚Ä¢ **Svelte 5** - Runes system, enhanced reactivity
‚Ä¢ **Astro 4** - Islands architecture, performance focus
‚Ä¢ **Web Components** - Native browser support expansion

**Backend Innovation:**
‚Ä¢ **Bun** - Ultra-fast JavaScript runtime (3x faster than Node.js)
‚Ä¢ **Deno 2.0** - Built-in TypeScript, modern APIs
‚Ä¢ **Rust** - Memory safety, performance for system programming
‚Ä¢ **Go** - Microservices, cloud-native development
‚Ä¢ **Python 3.12** - Performance improvements, better typing

**AI-Powered Development:**
ü§ñ **Coding Assistants:**
‚Ä¢ **GitHub Copilot** - AI pair programming
‚Ä¢ **Cursor** - AI-first code editor
‚Ä¢ **v0.dev** - AI UI component generation
‚Ä¢ **Claude/ChatGPT** - Code review, debugging assistance

ü§ñ **No-Code/Low-Code:**
‚Ä¢ **Vercel v0** - AI-generated React components
‚Ä¢ **Supabase** - Backend-as-a-Service with AI features
‚Ä¢ **Railway** - Simplified deployment platform
‚Ä¢ **Cloudflare** - Edge computing revolution

**Indonesian Tech Ecosystem:**
üáÆüá© **Local Innovations:**
‚Ä¢ **Gojek** - Super app model adopted globally
‚Ä¢ **Tokopedia** - E-commerce platform excellence
‚Ä¢ **Dana** - Digital wallet innovation
‚Ä¢ **Xendit** - Payment infrastructure for SEA

üáÆüá© **Government Initiatives:**
‚Ä¢ **Digital Indonesia 2045** - National digitalization
‚Ä¢ **Gerakan Nasional 1000 Startup** - Startup ecosystem
‚Ä¢ **Making Indonesia 4.0** - Industry transformation

**Emerging Technologies:**
‚Ä¢ **Quantum Computing** - IBM, Google breakthroughs
‚Ä¢ **Web3 & Blockchain** - Sustainable solutions
‚Ä¢ **Edge Computing** - 5G network optimization
‚Ä¢ **Augmented Reality** - Apple Vision Pro impact

**Which tech area excites you most?**`,

                `üöÄ **Advanced Technology Deep Dive**

**Development Paradigm Shifts:**

**Modern Architecture Patterns:**
\`\`\`
Monolith ‚Üí Microservices ‚Üí Serverless ‚Üí Edge Functions
MVC ‚Üí Component-Based ‚Üí Islands ‚Üí Server Components
REST ‚Üí GraphQL ‚Üí tRPC ‚Üí Real-time subscriptions
\`\`\`

**Performance-First Development:**
‚Ä¢ **Core Web Vitals** - LCP, FID, CLS optimization
‚Ä¢ **Edge-Side Rendering** - Cloudflare Workers, Deno Deploy
‚Ä¢ **Streaming SSR** - React 18, Next.js App Router
‚Ä¢ **Islands Architecture** - Astro, Fresh, partial hydration

**AI Integration in Development:**
üîÆ **Code Generation:**
‚Ä¢ **GitHub Copilot** - Context-aware suggestions
‚Ä¢ **Tabnine** - AI code completion
‚Ä¢ **Amazon CodeWhisperer** - AWS-optimized suggestions
‚Ä¢ **Replit Ghostwriter** - Collaborative AI coding

üîÆ **AI-Powered Tools:**
‚Ä¢ **Automated Testing** - AI test case generation
‚Ä¢ **Code Review** - AI-powered PR analysis
‚Ä¢ **Documentation** - Auto-generated API docs
‚Ä¢ **Debugging** - AI error diagnosis

**Cloud-Native Excellence:**
‚òÅÔ∏è **Modern Deployment:**
‚Ä¢ **Serverless First** - AWS Lambda, Vercel Functions
‚Ä¢ **Container Orchestration** - Kubernetes, Docker Swarm
‚Ä¢ **Infrastructure as Code** - Terraform, Pulumi, CDK
‚Ä¢ **GitOps** - ArgoCD, Flux, automated deployments

**Security-First Development:**
üîê **Modern Security:**
‚Ä¢ **Zero Trust Architecture** - Never trust, always verify
‚Ä¢ **Supply Chain Security** - Dependency scanning, SBOM
‚Ä¢ **API Security** - OAuth 2.1, JWT best practices
‚Ä¢ **Container Security** - Image scanning, runtime protection

**Indonesian Developer Community:**
‚Ä¢ **Tech Conferences** - DevFest, JSConf Indonesia, PyCon ID
‚Ä¢ **Learning Platforms** - Dicoding, BuildWith Angga
‚Ä¢ **Developer Groups** - Facebook Developer Circle, Google Developer Group

**Ready to explore cutting-edge tech?**`
            ],
            'default': [
                `üåü **Universal AI Assistant - Ready for Anything!**

**üéØ What Can I Help With Today?**

**üíª Programming & Technology:**
‚Ä¢ Full-stack development (React, Node.js, Python, Go)
‚Ä¢ AI/ML implementation dan integration
‚Ä¢ Cloud architecture dan DevOps
‚Ä¢ Mobile app development
‚Ä¢ Database design dan optimization
‚Ä¢ API development dan best practices
‚Ä¢ Code review, debugging, performance tuning

**üìö Knowledge & Learning:**
‚Ä¢ Science explanations (Physics, Chemistry, Biology)
‚Ä¢ Mathematics problem solving
‚Ä¢ Historical analysis dan context
‚Ä¢ Current events dan trend analysis
‚Ä¢ Academic research assistance
‚Ä¢ Language learning support
‚Ä¢ Creative writing dan content creation

**üáÆüá© Indonesia Expertise:**
‚Ä¢ Cultural insights dan traditions
‚Ä¢ Tourism recommendations
‚Ä¢ Business landscape analysis
‚Ä¢ Local language nuances
‚Ä¢ Economic trends dan opportunities
‚Ä¢ Tech ecosystem updates

**üé® Creative & Practical:**
‚Ä¢ Design principles dan UI/UX guidance
‚Ä¢ Content strategy dan copywriting
‚Ä¢ Problem-solving frameworks
‚Ä¢ Productivity tips dan life hacks
‚Ä¢ Health dan wellness advice
‚Ä¢ Financial planning dan investment insights

**üîç Analysis & Research:**
‚Ä¢ Data interpretation dan visualization
‚Ä¢ Competitive analysis
‚Ä¢ Market research dan trends
‚Ä¢ Technical documentation
‚Ä¢ Strategic planning
‚Ä¢ Risk assessment

**üí° How I Approach Every Question:**
1. **Understand Context** - What's your goal dan current situation?
2. **Provide Clear Answers** - Step-by-step, actionable solutions
3. **Share Best Practices** - Professional insights dan tips
4. **Give Examples** - Real-world applications dan use cases
5. **Suggest Next Steps** - How to implement dan improve further

**üöÄ Recent Capabilities:**
‚Ä¢ Advanced code generation dengan modern frameworks
‚Ä¢ AI/ML integration strategies
‚Ä¢ Cloud-native architecture design
‚Ä¢ Indonesian market analysis
‚Ä¢ Multilingual content creation
‚Ä¢ Complex problem decomposition

**Ask me anything!** The more specific your question, the more detailed dan helpful my response will be.

**Popular conversation starters:**
‚Ä¢ "How do I build a [specific app/feature]?"
‚Ä¢ "Explain [concept] in simple terms"
‚Ä¢ "What's the best approach for [challenge]?"
‚Ä¢ "Compare [option A] vs [option B]"
‚Ä¢ "Help me troubleshoot [specific problem]"

**What would you like to explore today?** üöÄ`
            ]
        };

        this.stats = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            averageResponseTime: 0,
            lastRequestTime: null,
            complexityHandled: {
                simple: 0,
                intermediate: 0,
                complex: 0,
                expert: 0
            }
        };

        console.log('üöÄ Ultimate Universal Gemini Model initialized');
    }

    /**
     * Enhanced prompt building with context optimization
     */
    buildMasterPrompt(question, context = []) {
        let prompt = this.masterSystemPrompt + '\n\n';

        // Smart context processing
        if (context && context.length > 0) {
            prompt += 'üìã **CONVERSATION CONTEXT:**\n';
            const recentContext = context.slice(-10); // More context for better understanding

            recentContext.forEach((msg) => {
                const role = msg.isUser ? 'USER' : 'ASSISTANT';
                const text = msg.text.substring(0, 400); // More context per message
                const timestamp = msg.timestamp ?
                    ` (${new Date(msg.timestamp).toLocaleTimeString('id-ID')})` : '';
                prompt += `${role}${timestamp}: ${text}\n`;
            });
            prompt += '\n';
        }

        // Question complexity analysis
        const complexity = this.analyzeQuestionComplexity(question);
        this.stats.complexityHandled[complexity]++;

        prompt += `üéØ **CURRENT QUESTION:**\n${question}\n\n`;

        prompt += `üìä **DETECTED COMPLEXITY:** ${complexity.toUpperCase()}\n\n`;

        // Enhanced response instructions
        prompt += `üìù **RESPONSE INSTRUCTIONS:**

**For ${complexity.toUpperCase()} Level Questions:**
${this.getComplexityInstructions(complexity)}

**Universal Guidelines:**
‚Ä¢ Provide comprehensive, well-structured answers
‚Ä¢ Use strategic markdown formatting (bold, bullets, code blocks)
‚Ä¢ For coding: Always include working examples with detailed comments
‚Ä¢ For general topics: Use analogies, examples, and practical applications
‚Ä¢ Add strategic emojis for visual clarity and engagement
‚Ä¢ End with actionable advice or thoughtful follow-up questions
‚Ä¢ Leverage Gemini 2.5 Flash's adaptive capabilities
‚Ä¢ Balance technical depth with accessibility
‚Ä¢ Prioritize practical value and real-world applicability

**Quality Standards:**
‚úÖ Accuracy and up-to-date information
‚úÖ Actionable insights and solutions
‚úÖ Clear explanations with examples
‚úÖ Best practices and modern approaches
‚úÖ Indonesian context when relevant
‚úÖ Professional yet friendly tone

RESPOND IN NATURAL BAHASA INDONESIA WITH EXPERT-LEVEL INSIGHTS!`;

        return prompt;
    }

    /**
     * Question complexity analysis
     */
    analyzeQuestionComplexity(question) {
        const lowerQuestion = question.toLowerCase();

        // Expert level indicators
        const expertKeywords = [
            'architecture', 'scalability', 'microservices', 'kubernetes', 'devops',
            'machine learning', 'deep learning', 'neural network', 'algorithm optimization',
            'distributed systems', 'performance optimization', 'security implementation',
            'complex analysis', 'advanced', 'enterprise', 'production-ready'
        ];

        // Complex level indicators
        const complexKeywords = [
            'implement', 'integrate', 'deploy', 'build', 'create', 'develop',
            'database design', 'api development', 'full-stack', 'framework comparison',
            'best practices', 'troubleshoot', 'optimize', 'analyze'
        ];

        // Intermediate level indicators
        const intermediateKeywords = [
            'how to', 'tutorial', 'guide', 'learn', 'understand', 'explain',
            'difference between', 'comparison', 'examples', 'getting started'
        ];

        if (expertKeywords.some(keyword => lowerQuestion.includes(keyword))) {
            return 'expert';
        } else if (complexKeywords.some(keyword => lowerQuestion.includes(keyword))) {
            return 'complex';
        } else if (intermediateKeywords.some(keyword => lowerQuestion.includes(keyword))) {
            return 'intermediate';
        } else {
            return 'simple';
        }
    }

    /**
     * Complexity-specific instructions
     */
    getComplexityInstructions(complexity) {
        const instructions = {
            'simple': `
‚Ä¢ Provide clear, concise answers with basic examples
‚Ä¢ Use simple language and analogies
‚Ä¢ Include fundamental concepts and definitions
‚Ä¢ Offer next learning steps`,

            'intermediate': `
‚Ä¢ Give detailed explanations with multiple examples
‚Ä¢ Include step-by-step instructions
‚Ä¢ Provide context and background information
‚Ä¢ Suggest related topics and resources`,

            'complex': `
‚Ä¢ Offer comprehensive solutions with code examples
‚Ä¢ Include best practices and alternative approaches
‚Ä¢ Discuss trade-offs and considerations
‚Ä¢ Provide implementation details and deployment guidance`,

            'expert': `
‚Ä¢ Deliver in-depth technical analysis
‚Ä¢ Include architecture patterns and design decisions
‚Ä¢ Discuss scalability, performance, and security implications
‚Ä¢ Provide production-ready solutions with advanced optimizations`
        };

        return instructions[complexity] || instructions['simple'];
    }

    /**
     * Enhanced API request
     */
    async askQuestion(question, context = []) {
        const startTime = Date.now();
        this.stats.totalRequests++;

        try {
            console.log(`üöÄ Processing ${this.analyzeQuestionComplexity(question)} question: ${question.substring(0, 100)}...`);

            const url = `${this.apiUrl}?key=${this.apiKey}`;
            const masterPrompt = this.buildMasterPrompt(question, context);

            const payload = {
                contents: [{
                    parts: [{
                        text: masterPrompt
                    }]
                }],
                generationConfig: {
                    temperature: 0.75,           // Slightly higher for creativity
                    maxOutputTokens: 8192,       // Maximum for 2.5 Flash
                    topP: 0.9,
                    topK: 40,
                    candidateCount: 1,
                    stopSequences: ["<|END|>", "---COMPLETE---"]
                },
                safetySettings: [{
                    category: "HARM_CATEGORY_HARASSMENT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                }, {
                    category: "HARM_CATEGORY_HATE_SPEECH",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                }, {
                    category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                }, {
                    category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE"
                }]
            };

            // Enhanced retry logic
            let response;
            let attempts = 0;
            const maxAttempts = 3;

            while (attempts < maxAttempts) {
                try {
                    response = await axios.post(url, payload, {
                        headers: {
                            'Content-Type': 'application/json',
                            'User-Agent': 'AnaphygonAsk-Ultimate/3.0'
                        },
                        timeout: 50000 // 50 seconds
                    });
                    break;
                } catch (error) {
                    attempts++;
                    if (attempts >= maxAttempts) throw error;

                    console.warn(`Retry ${attempts}/${maxAttempts} after error:`, error.message);
                    await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
                }
            }

            // Enhanced response processing
            if (!response.data.candidates || response.data.candidates.length === 0) {
                throw new Error('No response candidates received');
            }

            const candidate = response.data.candidates[0];

            if (candidate.finishReason === 'SAFETY') {
                return this.getIntelligentFallbackResponse(question, {
                    type: 'safety_filter',
                    message: 'Content filtered for safety'
                });
            }

            if (!candidate.content?.parts?.[0]?.text) {
                return this.getIntelligentFallbackResponse(question, {
                    type: 'empty_response',
                    message: 'Empty response received'
                });
            }

            const generatedText = candidate.content.parts[0].text;
            const responseTime = Date.now() - startTime;

            // Update stats
            this.stats.successfulRequests++;
            this.stats.lastRequestTime = responseTime;
            this.stats.averageResponseTime =
                (this.stats.averageResponseTime * (this.stats.successfulRequests - 1) + responseTime) /
                this.stats.successfulRequests;

            console.log(`‚úÖ Response generated in ${responseTime}ms`);

            return {
                success: true,
                message: this.enhanceResponse(generatedText),
                metadata: {
                    model: 'gemini-2.5-flash-ultimate',
                    complexity: this.analyzeQuestionComplexity(question),
                    finishReason: candidate.finishReason,
                    responseTime: responseTime,
                    promptTokens: response.data.usageMetadata?.promptTokenCount || 0,
                    completionTokens: response.data.usageMetadata?.candidatesTokenCount || 0,
                    version: '3.0-ultimate',
                    performance: this.getPerformanceStats()
                }
            };

        } catch (error) {
            this.stats.failedRequests++;
            console.error('‚ùå API Error:', error.message);
            return this.getIntelligentFallbackResponse(question, error);
        }
    }

    /**
     * Advanced response enhancement
     */
    enhanceResponse(text) {
        // Clean up formatting
        text = text.trim();
        text = text.replace(/\n{3,}/g, '\n\n');
        text = text.replace(/ +/g, ' ');
        text = text.replace(/^\s+|\s+$/gm, '');

        // Convert markdown headers to bold format (sesuai requirement)
        text = text.replace(/^### (.+)$/gm, '**$1:**');
        text = text.replace(/^## (.+)$/gm, '**$1:**');
        text = text.replace(/^# (.+)$/gm, '**$1:**');

        // Enhance list formatting
        text = text.replace(/\n-\s/g, '\n‚Ä¢ ');
        text = text.replace(/\n\*\s/g, '\n‚Ä¢ ');

        // Code block enhancement
        text = text.replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
            const cleanCode = code.trim();
            const language = lang || 'javascript';
            return `\`\`\`${language}\n${cleanCode}\n\`\`\``;
        });

        // Strategic emoji enhancement
        text = this.addContextualEmojis(text);

        // Add quality indicators for code examples
        text = this.enhanceCodeExamples(text);

        return text;
    }

    /**
     * Contextual emoji enhancement
     */
    addContextualEmojis(text) {
        const emojiEnhancements = {
            // Programming languages
            'Python': 'üêç', 'JavaScript': '‚ö°', 'TypeScript': 'üî∑', 'React': '‚öõÔ∏è',
            'Vue': 'üíö', 'Angular': 'üÖ∞Ô∏è', 'Node.js': 'üü¢', 'Next.js': '‚ñ≤',
            'Django': 'üé∏', 'Flask': 'üå∂Ô∏è', 'FastAPI': 'üöÄ',

            // Technologies
            'Docker': 'üê≥', 'Kubernetes': '‚ò∏Ô∏è', 'AWS': '‚òÅÔ∏è', 'MongoDB': 'üçÉ',
            'PostgreSQL': 'üêò', 'Redis': 'üî¥', 'GraphQL': 'üå∏',

            // AI/ML
            'AI': 'ü§ñ', 'Machine Learning': 'üß†', 'Deep Learning': 'üß†',
            'TensorFlow': 'üìä', 'PyTorch': 'üî•', 'Neural Network': 'üß†',

            // General concepts
            'Performance': 'üöÄ', 'Security': 'üîê', 'Database': 'üóÑÔ∏è',
            'API': 'üîó', 'Frontend': 'üé®', 'Backend': '‚öôÔ∏è',
            'Mobile': 'üì±', 'Web': 'üåê', 'Cloud': '‚òÅÔ∏è',

            // Indonesian context
            'Indonesia': 'üáÆüá©', 'Jakarta': 'üèôÔ∏è', 'Bali': 'üèùÔ∏è',
            'Gojek': 'üõµ', 'Tokopedia': 'üõí',

            // Learning & development
            'Tutorial': 'üìö', 'Guide': 'üìñ', 'Tips': 'üí°',
            'Best Practices': '‚≠ê', 'Example': 'üìù',
            'Important': '‚ö†Ô∏è', 'Note': 'üìå', 'Warning': '‚ö†Ô∏è'
        };

        for (const [keyword, emoji] of Object.entries(emojiEnhancements)) {
            // Only add emoji if not already present
            const regex = new RegExp(`\\b${keyword}\\b(?![^\\[]*\\])(?![^<]*>)(?!.*${emoji})`, 'gi');
            if (regex.test(text)) {
                text = text.replace(regex, `${keyword} ${emoji}`);
            }
        }

        return text;
    }

    /**
     * Enhance code examples with quality indicators
     */
    enhanceCodeExamples(text) {
        // Add quality badges to code blocks
        text = text.replace(/```(\w+)\n([\s\S]*?)```/g, (match, lang, code) => {
            const hasComments = /\/\/|\/\*|\#|<!--/.test(code);
            const hasErrorHandling = /try|catch|except|error|Error/.test(code);
            const hasTypes = /interface|type|:.*=|<.*>/.test(code);

            let qualityIndicators = [];
            if (hasComments) qualityIndicators.push('üìù Well-documented');
            if (hasErrorHandling) qualityIndicators.push('üõ°Ô∏è Error handling');
            if (hasTypes) qualityIndicators.push('üî∑ Type-safe');

            const indicators = qualityIndicators.length > 0 ?
                `\n*${qualityIndicators.join(' ‚Ä¢ ')}*\n` : '\n';

            return `\`\`\`${lang}\n${code.trim()}\n\`\`\`${indicators}`;
        });

        return text;
    }

    /**
     * Intelligent fallback response system
     */
    getIntelligentFallbackResponse(question, error) {
        const lowerQuestion = question.toLowerCase();

        // Advanced keyword mapping with more categories
        const keywordMappings = {
            'programming': [
                'coding', 'program', 'development', 'code', 'javascript', 'python',
                'react', 'node', 'api', 'database', 'frontend', 'backend', 'mobile',
                'web', 'app', 'software', 'algorithm', 'framework', 'library'
            ],
            'ai': [
                'artificial intelligence', 'machine learning', 'deep learning',
                'neural network', 'ai', 'ml', 'tensorflow', 'pytorch', 'model',
                'training', 'prediction', 'classification', 'nlp', 'computer vision'
            ],
            'indonesia': [
                'indonesia', 'indonesian', 'jakarta', 'bali', 'java', 'sumatra',
                'kalimantan', 'sulawesi', 'papua', 'nusantara', 'garuda', 'borobudur',
                'yogyakarta', 'surabaya', 'bandung', 'medan', 'makassar'
            ],
            'teknologi': [
                'teknologi', 'technology', 'tech', 'digital', 'software', 'hardware',
                'startup', 'innovation', 'future', 'trend', 'gadget', 'internet'
            ]
        };

        // Find best matching category
        let bestMatch = 'default';
        let maxMatches = 0;

        for (const [category, keywords] of Object.entries(keywordMappings)) {
            const matches = keywords.filter(keyword => lowerQuestion.includes(keyword)).length;
            if (matches > maxMatches) {
                maxMatches = matches;
                bestMatch = category;
            }
        }

        const responses = this.expertFallbacks[bestMatch] || this.expertFallbacks['default'];
        const selectedResponse = Array.isArray(responses) ?
            responses[Math.floor(Math.random() * responses.length)] :
            responses;

        // Enhanced error handling with specific solutions
        if (error.response?.status === 429) {
            return {
                success: true,
                message: `‚è∞ **Rate Limit - Mari Optimasi!**

Wah, antusiasme Anda luar biasa! üöÄ Server sedang overload dengan request.

**Smart Solutions:**
‚Ä¢ **Wait Strategy**: Tunggu 60-90 detik untuk reset
‚Ä¢ **Question Optimization**: Pertanyaan lebih spesifik = response lebih cepat
‚Ä¢ **Batch Approach**: Gabungkan beberapa pertanyaan kecil

**Pro Tips:**
‚Ä¢ Gunakan pertanyaan yang focused dan actionable
‚Ä¢ Hindari pertanyaan yang terlalu general atau panjang
‚Ä¢ Consider breaking complex topics into smaller chunks

**Ready to continue?** üí°`,
                fallback: true,
                fallbackType: 'rate_limit_optimized'
            };
        }

        return {
            success: true,
            message: selectedResponse,
            fallback: true,
            fallbackType: 'intelligent_keyword_match',
            matchedCategory: bestMatch,
            matchScore: maxMatches,
            metadata: {
                model: 'gemini-2.5-flash-ultimate-fallback',
                version: '3.0-ultimate'
            }
        };
    }

    /**
     * Enhanced performance statistics
     */
    getPerformanceStats() {
        const total = this.stats.totalRequests;
        return {
            totalRequests: total,
            successfulRequests: this.stats.successfulRequests,
            failedRequests: this.stats.failedRequests,
            successRate: total > 0 ? ((this.stats.successfulRequests / total) * 100).toFixed(2) + '%' : '0%',
            averageResponseTime: Math.round(this.stats.averageResponseTime) + 'ms',
            lastRequestTime: this.stats.lastRequestTime ? this.stats.lastRequestTime + 'ms' : 'N/A',
            complexityDistribution: {
                simple: `${this.stats.complexityHandled.simple} (${((this.stats.complexityHandled.simple / total) * 100).toFixed(1)}%)`,
                intermediate: `${this.stats.complexityHandled.intermediate} (${((this.stats.complexityHandled.intermediate / total) * 100).toFixed(1)}%)`,
                complex: `${this.stats.complexityHandled.complex} (${((this.stats.complexityHandled.complex / total) * 100).toFixed(1)}%)`,
                expert: `${this.stats.complexityHandled.expert} (${((this.stats.complexityHandled.expert / total) * 100).toFixed(1)}%)`
            }
        };
    }

    /**
     * Enhanced validation with detailed feedback
     */
    validateQuestion(question) {
        if (!question || typeof question !== 'string') {
            return {
                isValid: false,
                message: 'Input harus berupa text yang valid.',
                suggestion: 'Ketik pertanyaan Anda dengan jelas.'
            };
        }

        const trimmed = question.trim();

        if (trimmed.length === 0) {
            return {
                isValid: false,
                message: 'Pertanyaan tidak boleh kosong.',
                suggestion: 'Mulai dengan kata tanya seperti "Bagaimana", "Apa", "Jelaskan", atau "Buat".'
            };
        }

        if (trimmed.length > 10000) {
            return {
                isValid: false,
                message: 'Pertanyaan terlalu panjang (maksimal 10.000 karakter).',
                suggestion: 'Pecah menjadi beberapa pertanyaan yang lebih fokus dan spesifik.'
            };
        }

        if (trimmed.length < 3) {
            return {
                isValid: false,
                message: 'Pertanyaan terlalu pendek.',
                suggestion: 'Berikan konteks lebih detail agar saya bisa membantu dengan optimal.'
            };
        }

        // Check for spam patterns
        if (/(.{3,})\1{5,}/.test(trimmed)) {
            return {
                isValid: false,
                message: 'Format tidak valid - terdeteksi sebagai spam.',
                suggestion: 'Gunakan kalimat natural dengan variasi kata.'
            };
        }

        // Check for excessive special characters
        const specialCharRatio = (trimmed.match(/[^a-zA-Z0-9\s]/g) || []).length / trimmed.length;
        if (specialCharRatio > 0.5) {
            return {
                isValid: false,
                message: 'Terlalu banyak karakter khusus.',
                suggestion: 'Gunakan teks yang lebih natural dengan huruf dan angka.'
            };
        }

        return { isValid: true };
    }

    /**
     * Comprehensive system status and capabilities
     */
    getSystemStats() {
        return {
            model: 'gemini-2.5-flash-ultimate',
            version: '3.0-elite-universal',
            capabilities: {
                'universal_knowledge': 'Expert level across all domains',
                'coding_expertise': 'Elite level - all languages, frameworks, tools',
                'indonesian_context': 'Deep cultural and business understanding',
                'ai_integration': 'Advanced AI/ML implementation guidance',
                'modern_tech_stack': 'Latest frameworks and best practices',
                'problem_solving': 'Multi-level complexity handling',
                'real_time_adaptation': 'Context-aware response optimization'
            },
            features: [
                'Adaptive complexity analysis',
                'Enhanced context processing (10 messages)',
                'Strategic emoji integration',
                'Code quality indicators',
                'Intelligent fallback system',
                'Performance optimization tracking',
                'Multi-level expertise (simple to expert)',
                'Cultural context awareness',
                'Best practices integration',
                'Real-world application focus'
            ],
            technical_specs: {
                max_context_messages: 10,
                max_output_tokens: 8192,
                temperature: 0.75,
                timeout: '50 seconds',
                retry_attempts: 3,
                fallback_categories: 5,
                complexity_levels: 4
            },
            performance: this.getPerformanceStats(),
            indonesian_specialties: [
                'Local business ecosystem understanding',
                'Cultural nuances and traditions',
                'Tech startup landscape',
                'Government digitalization initiatives',
                'Regional development opportunities',
                'Language learning support',
                'Tourism and cultural recommendations'
            ],
            coding_specialties: [
                'Modern JavaScript ecosystem (React 19, Next.js 14, Bun)',
                'Python excellence (Django, FastAPI, AI/ML)',
                'Cloud-native architecture (AWS, GCP, Kubernetes)',
                'AI/ML implementation (TensorFlow, PyTorch, LLM APIs)',
                'Mobile development (React Native, Flutter)',
                'DevOps and CI/CD (Docker, GitHub Actions, Terraform)',
                'Database optimization (SQL, NoSQL, Vector DBs)',
                'Security best practices and implementation'
            ],
            learning_approach: {
                'beginner_friendly': 'Clear explanations with analogies',
                'intermediate_guidance': 'Step-by-step implementations',
                'advanced_solutions': 'Architecture and optimization',
                'expert_consulting': 'Production-ready enterprise solutions'
            },
            response_quality: {
                'accuracy': 'Verified information with latest practices',
                'practicality': 'Working code and actionable solutions',
                'completeness': 'Comprehensive with examples and alternatives',
                'cultural_awareness': 'Indonesian context when relevant',
                'innovation_focus': 'Latest trends and emerging technologies'
            },
            status: 'fully_operational_elite_mode'
        };
    }

    /**
     * Smart question preprocessing
     */
    preprocessQuestion(question) {
        // Normalize whitespace
        question = question.trim().replace(/\s+/g, ' ');

        // Handle common misspellings for Indonesian tech terms
        const corrections = {
            'reactjs': 'React.js',
            'nodejs': 'Node.js',
            'nextjs': 'Next.js',
            'vuejs': 'Vue.js',
            'javascript': 'JavaScript',
            'typescript': 'TypeScript',
            'mongodb': 'MongoDB',
            'postgresql': 'PostgreSQL',
            'mysql': 'MySQL'
        };

        for (const [wrong, correct] of Object.entries(corrections)) {
            const regex = new RegExp(`\\b${wrong}\\b`, 'gi');
            question = question.replace(regex, correct);
        }

        return question;
    }

    /**
     * Context relevance scoring
     */
    scoreContextRelevance(question, context) {
        if (!context || context.length === 0) return 0;

        const questionWords = question.toLowerCase().split(/\s+/);
        let relevanceScore = 0;

        context.slice(-5).forEach((msg, index) => {
            const msgWords = msg.text.toLowerCase().split(/\s+/);
            const commonWords = questionWords.filter(word =>
                msgWords.some(msgWord => msgWord.includes(word) || word.includes(msgWord))
            );

            // Recent messages get higher weight
            const timeWeight = (index + 1) / 5;
            relevanceScore += (commonWords.length / questionWords.length) * timeWeight;
        });

        return Math.min(relevanceScore, 1); // Cap at 1.0
    }

    /**
     * Enhanced ask method with preprocessing
     */
    async askQuestionEnhanced(question, context = []) {
        // Preprocess question
        const processedQuestion = this.preprocessQuestion(question);

        // Validate
        const validation = this.validateQuestion(processedQuestion);
        if (!validation.isValid) {
            return {
                success: false,
                message: validation.message,
                suggestion: validation.suggestion,
                validation: false
            };
        }

        // Score context relevance
        const contextRelevance = this.scoreContextRelevance(processedQuestion, context);
        console.log(`üìä Context relevance: ${(contextRelevance * 100).toFixed(1)}%`);

        // Call main ask method
        return await this.askQuestion(processedQuestion, context);
    }
}

module.exports = new UltimateUniversalGeminiModel();